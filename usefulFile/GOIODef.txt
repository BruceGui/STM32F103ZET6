/* ----------------------------------------------------------------------------
   -- GPIO
   ---------------------------------------------------------------------------- */

/**
 * @addtogroup GPIO_Peripheral GPIO
 * @{
 */

/** GPIO - Peripheral register structure */
typedef struct GPIO_MemMap
{
    union
    {
        uint32_t PDOR;                                   /**< Port Data Output Register, offset: 0x0 */
        struct                                            // 用于直接赋值位的   ――by 野火
        {
            u32 PDOR0 : 1;
            u32 PDOR1: 1;
            u32 PDOR2 : 1;
            u32 PDOR3 : 1;
            u32 PDOR4 : 1;
            u32 PDOR5 : 1;
            u32 PDOR6 : 1;
            u32 PDOR7 : 1;
            u32 PDOR8 : 1;
            u32 PDOR9 : 1;
            u32 PDOR10: 1;
            u32 PDOR11: 1;
            u32 PDOR12: 1;
            u32 PDOR13: 1;
            u32 PDOR14: 1;
            u32 PDOR15: 1;
            u32 PDOR16: 1;
            u32 PDOR17: 1;
            u32 PDOR18: 1;
            u32 PDOR19: 1;
            u32 PDOR20: 1;
            u32 PDOR21: 1;
            u32 PDOR22: 1;
            u32 PDOR23: 1;
            u32 PDOR24: 1;
            u32 PDOR25: 1;
            u32 PDOR26: 1;
            u32 PDOR27: 1;
            u32 PDOR28: 1;
            u32 PDOR29: 1;
            u32 PDOR30: 1;
            u32 PDOR31: 1;
        } PDORs;
        struct                                            // 用于直接赋值位的   ――by 野火
        {
            u8 Byte0;
            u8 Byte1;
            u8 Byte2;
            u8 Byte3;
        } PDORByte;
        struct                                            // 用于直接赋值位的   ――by 野火
        {
            u16 Word0;
            u16 Word1;
        } PDORWord;
    };

    uint32_t PSOR;                                   /**< Port Set Output Register, offset: 0x4 */
    uint32_t PCOR;                                   /**< Port Clear Output Register, offset: 0x8 */
    uint32_t PTOR;                                   /**< Port Toggle Output Register, offset: 0xC */

    union
    {
        uint32_t PDIR;                                   /**< Port Data Input Register, offset: 0x10 */
        struct                                            // 用于直接赋值位的   ――by 野火
        {
            u32 PDIR0 : 1;
            u32 PDIR1: 1;
            u32 PDIR2 : 1;
            u32 PDIR3 : 1;
            u32 PDIR4 : 1;
            u32 PDIR5 : 1;
            u32 PDIR6 : 1;
            u32 PDIR7 : 1;
            u32 PDIR8 : 1;
            u32 PDIR9 : 1;
            u32 PDIR10: 1;
            u32 PDIR11: 1;
            u32 PDIR12: 1;
            u32 PDIR13: 1;
            u32 PDIR14: 1;
            u32 PDIR15: 1;
            u32 PDIR16: 1;
            u32 PDIR17: 1;
            u32 PDIR18: 1;
            u32 PDIR19: 1;
            u32 PDIR20: 1;
            u32 PDIR21: 1;
            u32 PDIR22: 1;
            u32 PDIR23: 1;
            u32 PDIR24: 1;
            u32 PDIR25: 1;
            u32 PDIR26: 1;
            u32 PDIR27: 1;
            u32 PDIR28: 1;
            u32 PDIR29: 1;
            u32 PDIR30: 1;
            u32 PDIR31: 1;
        } PDIRs;
        struct                                            // 用于直接赋值位的   ――by 野火
        {
            u8 Byte0;
            u8 Byte1;
            u8 Byte2;
            u8 Byte3;
        } PDIRByte;
        struct                                            // 用于直接赋值位的   ――by 野火
        {
            u16 Word0;
            u16 Word1;
        } PDIRWord;
    };

    union
    {
        uint32_t PDDR;                                   /**< Port Data Direction Register, offset: 0x14 */
        struct                                            // 用于直接赋值位的   ――by 野火
        {
            u32 DDR0 : 1;
            u32 DDR1: 1;
            u32 DDR2 : 1;
            u32 DDR3 : 1;
            u32 DDR4 : 1;
            u32 DDR5 : 1;
            u32 DDR6 : 1;
            u32 DDR7 : 1;
            u32 DDR8 : 1;
            u32 DDR9 : 1;
            u32 DDR10: 1;
            u32 DDR11: 1;
            u32 DDR12: 1;
            u32 DDR13: 1;
            u32 DDR14: 1;
            u32 DDR15: 1;
            u32 DDR16: 1;
            u32 DDR17: 1;
            u32 DDR18: 1;
            u32 DDR19: 1;
            u32 DDR20: 1;
            u32 DDR21: 1;
            u32 DDR22: 1;
            u32 DDR23: 1;
            u32 DDR24: 1;
            u32 DDR25: 1;
            u32 DDR26: 1;
            u32 DDR27: 1;
            u32 DDR28: 1;
            u32 DDR29: 1;
            u32 DDR30: 1;
            u32 DDR31: 1;
        } DDRs;
        struct                                            // 用于直接赋值位的   ――by 野火
        {
            u8 Byte0;
            u8 Byte1;
            u8 Byte2;
            u8 Byte3;
        } DDRByte;
        struct                                            // 用于直接赋值位的   ――by 野火
        {
            u16 Word0;
            u16 Word1;
        } DDRWord;
    };

} volatile *GPIO_MemMapPtr;


/* ----------------------------------------------------------------------------
   -- GPIO - Register accessor macros
   ---------------------------------------------------------------------------- */

/**
 * @addtogroup GPIO_Register_Accessor_Macros GPIO - Register accessor macros
 * @{
 */


/* GPIO - Register accessors */
#define GPIO_PDOR_REG(base)                      ((base)->PDOR)
#define GPIO_PSOR_REG(base)                      ((base)->PSOR)
#define GPIO_PCOR_REG(base)                      ((base)->PCOR)
#define GPIO_PTOR_REG(base)                      ((base)->PTOR)
#define GPIO_PDIR_REG(base)                      ((base)->PDIR)
#define GPIO_PDDR_REG(base)                      ((base)->PDDR)

/**
 * @}
 */ /* end of group GPIO_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- GPIO Register Masks
   ---------------------------------------------------------------------------- */

/**
 * @addtogroup GPIO_Register_Masks GPIO Register Masks
 * @{
 */

/* PDOR Bit Fields */
#define GPIO_PDOR_PDO_MASK                       0xFFFFFFFFu
#define GPIO_PDOR_PDO_SHIFT                      0
#define GPIO_PDOR_PDO(x)                         (((uint32_t)(((uint32_t)(x))<<GPIO_PDOR_PDO_SHIFT))&GPIO_PDOR_PDO_MASK)
/* PSOR Bit Fields */
#define GPIO_PSOR_PTSO_MASK                      0xFFFFFFFFu
#define GPIO_PSOR_PTSO_SHIFT                     0
#define GPIO_PSOR_PTSO(x)                        (((uint32_t)(((uint32_t)(x))<<GPIO_PSOR_PTSO_SHIFT))&GPIO_PSOR_PTSO_MASK)
/* PCOR Bit Fields */
#define GPIO_PCOR_PTCO_MASK                      0xFFFFFFFFu
#define GPIO_PCOR_PTCO_SHIFT                     0
#define GPIO_PCOR_PTCO(x)                        (((uint32_t)(((uint32_t)(x))<<GPIO_PCOR_PTCO_SHIFT))&GPIO_PCOR_PTCO_MASK)
/* PTOR Bit Fields */
#define GPIO_PTOR_PTTO_MASK                      0xFFFFFFFFu
#define GPIO_PTOR_PTTO_SHIFT                     0
#define GPIO_PTOR_PTTO(x)                        (((uint32_t)(((uint32_t)(x))<<GPIO_PTOR_PTTO_SHIFT))&GPIO_PTOR_PTTO_MASK)
/* PDIR Bit Fields */
#define GPIO_PDIR_PDI_MASK                       0xFFFFFFFFu
#define GPIO_PDIR_PDI_SHIFT                      0
#define GPIO_PDIR_PDI(x)                         (((uint32_t)(((uint32_t)(x))<<GPIO_PDIR_PDI_SHIFT))&GPIO_PDIR_PDI_MASK)
/* PDDR Bit Fields */
#define GPIO_PDDR_PDD_MASK                       0xFFFFFFFFu
#define GPIO_PDDR_PDD_SHIFT                      0
#define GPIO_PDDR_PDD(x)                         (((uint32_t)(((uint32_t)(x))<<GPIO_PDDR_PDD_SHIFT))&GPIO_PDDR_PDD_MASK)

/**
 * @}
 */ /* end of group GPIO_Register_Masks */


/* GPIO - Peripheral instance base addresses */
/** Peripheral PTA base pointer */
#define PTA_BASE_PTR                             ((GPIO_MemMapPtr)0x400FF000u)
/** Peripheral PTB base pointer */
#define PTB_BASE_PTR                             ((GPIO_MemMapPtr)0x400FF040u)
/** Peripheral PTC base pointer */
#define PTC_BASE_PTR                             ((GPIO_MemMapPtr)0x400FF080u)
/** Peripheral PTD base pointer */
#define PTD_BASE_PTR                             ((GPIO_MemMapPtr)0x400FF0C0u)
/** Peripheral PTE base pointer */
#define PTE_BASE_PTR                             ((GPIO_MemMapPtr)0x400FF100u)

/* ----------------------------------------------------------------------------
   -- GPIO - Register accessor macros
   ---------------------------------------------------------------------------- */

/**
 * @addtogroup GPIO_Register_Accessor_Macros GPIO - Register accessor macros
 * @{
 */


/* GPIO - Register instance definitions */
/* PTA */
#define GPIOA_PDOR                               GPIO_PDOR_REG(PTA_BASE_PTR)
#define GPIOA_PSOR                               GPIO_PSOR_REG(PTA_BASE_PTR)
#define GPIOA_PCOR                               GPIO_PCOR_REG(PTA_BASE_PTR)
#define GPIOA_PTOR                               GPIO_PTOR_REG(PTA_BASE_PTR)
#define GPIOA_PDIR                               GPIO_PDIR_REG(PTA_BASE_PTR)
#define GPIOA_PDDR                               GPIO_PDDR_REG(PTA_BASE_PTR)
/* PTB */
#define GPIOB_PDOR                               GPIO_PDOR_REG(PTB_BASE_PTR)
#define GPIOB_PSOR                               GPIO_PSOR_REG(PTB_BASE_PTR)
#define GPIOB_PCOR                               GPIO_PCOR_REG(PTB_BASE_PTR)
#define GPIOB_PTOR                               GPIO_PTOR_REG(PTB_BASE_PTR)
#define GPIOB_PDIR                               GPIO_PDIR_REG(PTB_BASE_PTR)
#define GPIOB_PDDR                               GPIO_PDDR_REG(PTB_BASE_PTR)
/* PTC */
#define GPIOC_PDOR                               GPIO_PDOR_REG(PTC_BASE_PTR)
#define GPIOC_PSOR                               GPIO_PSOR_REG(PTC_BASE_PTR)
#define GPIOC_PCOR                               GPIO_PCOR_REG(PTC_BASE_PTR)
#define GPIOC_PTOR                               GPIO_PTOR_REG(PTC_BASE_PTR)
#define GPIOC_PDIR                               GPIO_PDIR_REG(PTC_BASE_PTR)
#define GPIOC_PDDR                               GPIO_PDDR_REG(PTC_BASE_PTR)
/* PTD */
#define GPIOD_PDOR                               GPIO_PDOR_REG(PTD_BASE_PTR)
#define GPIOD_PSOR                               GPIO_PSOR_REG(PTD_BASE_PTR)
#define GPIOD_PCOR                               GPIO_PCOR_REG(PTD_BASE_PTR)
#define GPIOD_PTOR                               GPIO_PTOR_REG(PTD_BASE_PTR)
#define GPIOD_PDIR                               GPIO_PDIR_REG(PTD_BASE_PTR)
#define GPIOD_PDDR                               GPIO_PDDR_REG(PTD_BASE_PTR)
/* PTE */
#define GPIOE_PDOR                               GPIO_PDOR_REG(PTE_BASE_PTR)
#define GPIOE_PSOR                               GPIO_PSOR_REG(PTE_BASE_PTR)
#define GPIOE_PCOR                               GPIO_PCOR_REG(PTE_BASE_PTR)
#define GPIOE_PTOR                               GPIO_PTOR_REG(PTE_BASE_PTR)
#define GPIOE_PDIR                               GPIO_PDIR_REG(PTE_BASE_PTR)
#define GPIOE_PDDR                               GPIO_PDDR_REG(PTE_BASE_PTR)

/**
 * @}
 */ /* end of group GPIO_Register_Accessor_Macros */


/**
 * @}
 */ /* end of group GPIO_Peripheral */